EX-1  in this app.js will share the data with all its child and grandchild. means app.js call the childA and childA is calling childB and childB is calling childC like this way in a hirarchy order. grandparent-parent-child-grandhild like this way data is passing

/Components/ChildA.js: Could not find module in path: './Components/ChildB' relative to '/Components/ChildA.js' (2:0)

step-1) Context/mycontext.js
// New file: /Context/mycontext.js
import { createContext } from "react";
const mycontext = createContext();
export default mycontext;

step-2) App.js
import ChildA from "./Components/ChildA";
import MyContext from "./Context/mycontext";

const App = () => {
  const user = { name: "Satyendra", age: 26 };

  return (
    <MyContext.Provider value={user}>
      <h1>Context Api</h1>
      <ChildA />
    </MyContext.Provider>
  );
};

export default App;


step-3) Components/ChildA.js
import ChildB from "./ChildB";
const ChildA = () => {
  return (
    <>
      <h1>ChildB</h1>
      <ChildB />
    </>
  );
};
export default ChildA;

step-4)  Components/ChildB.js
import ChildC from "./ChildC";
const ChildB = () => {
  return (
    <>
      <h1>ChildC</h1>
      <ChildC />
    </>
  );
};
export default ChildB;

step-5) /Components/ChildC.js
import { useContext } from "react";
import MyContext from "../Context/mycontext";

const ChildC = () => {
  const user = useContext(MyContext);

  return (
    <>
      <h2>ChildC</h2>
      <p>Name: {user.name}</p>
      <p>Age: {user.age}</p>
    </>
  );
};

export default ChildC;


Ex-2) in this app.js will share the data with all its child. means all siblings will get the data

a) // New file: /Context/contextdata.js
import { createContext } from "react";
const contextdata = createContext();
export default contextdata;

b)// New file: /Components/childA.js
import { useContext } from "react";
import contextdata from "../Context/contextdata";
const childA = () => {
  const data = useContext(contextdata);
  return (
    <>
      <h1>ChildA</h1>
      <p>{data}</p>
    </>
  );
};
export default childA;

c)// New file: /Components/childB.js
const childB = () => {
  return (
    <>
      <h1>ChildB</h1>
    </>
  );
};
export default childB;

d)// New file: /Components/childC.js
const childC = () => {
  return (
    <>
      <h1>ChildC</h1>
    </>
  );
};
export default childC;

e) App.js
-import contextdata from "./Context/contextdata";
import ChildA from "./Components/childA";
import ChildB from "./Components/childB";
import ChildC from "./Components/childC";

const App = () => {
  const data = "Hello how are you";
  return (
    <>
      <contextdata.Provider value={data}>
        <ChildA />
        <ChildB />
        <ChildC />
      </contextdata.Provider>
    </>
  );
};

export default App;
