props = > when react sees an element representing a user defined component, it passes jsx attribute to this component as a single object. we call this object "props" so parent se child me data send karne ke liye yaa phir ek component se dusre component me data sends
          karne ke liye hum iska istemal karte hai

import React from 'react';

const Student = (data) =>{       // humne isme (data) likha hai 
  return(
    <>
      <div>
        <h1>My information</h1>
        <p>{data.name}</p>
        <p>{data.roll}</p>
        <p>{data.grade}</p>
        <p>{data.city}</p>
        <p>{JSON.stringify(data)}</p>
      </div>
    </>
    )
}

const App = () =>{
  return(
    <>
      <div>
        <h1>this is my main App.js</h1>
        <h1>this wll be run first</h1>
        <Student name="satyendra" roll="121" grade="5th" city="Madhaya Pradesh" />    yaha dhyan dijiyega yaha humne naa comma lgaya hai direct aise jab hum likhte hai to {} object banakar nahi send karte hai
      </div>                                                                           means agar hum is tarah se likhenge to <Student {name="satyendra" roll="121" grade="5th" city="Madhaya Pradesh"} /> ye error show krega
    </>                                                                                agar aapko object banakar hi karna hai to aap pahle bana lenge newdata={name:"satyendra", roll:"121" ,grade:"5th" ,city:"Madhaya Pradesh} aur <Student data={newdata}/>
    )
}
export default App

Note- isme ek notice karne wala chiz ye hai ki humne student me (data)  likha hai ({data}) aise nahi likha hai kyu. (data) iska matlab ye hai ki pura ka pura object isme aa gya hai
aur agar hum ({data}) likhenge to iska matlab ye hai ki hum destructure kar rhe hai apne ki ko aur aisa hum tb krenge jab hum App.js me data send karenge kuch is tarah se 
<Student data={name="satyendra" roll="121" grade="5th" city="Madhaya Pradesh"} /> yaaa phir <Student data={newdata} /> iska matlab ye hai ki hum key send kar rhe hai to hume destructure kar lenge ({data}) is tarah se
waise ye jaruri nahi hai kyuki (data) aise bhi receive kar sakte hai lekin us case me hume yaha data milega data= {data={name="satyendra" roll="121" grade="5th" city="Madhaya Pradesh"}}  so hume extract karte samay data.data.name aise likhna hoga

EX-2
// New file: /Components/Student.js
const Student = ({ data }) => {
  return (
    <>
      <h1>Hello how are you</h1>
      {Object.entries(data).map(([key, value], index) => (
        <p key={index}>
          {key}: {value}
        </p>
      ))}
    </>
  );
};
export default Student;

a)
// Teacher.js
const Teacher = () => {
  return (
    <>
      <h1>kya kar rha hai be</h1>
    </>
  );
};
export default Teacher;

b) App.js
import Student from "../Components/Student.js";
import Teacher from "../Components/Teacher.js";

const data = {
  name: "satyendra",
  class: "5th",
};

const App = () => {
  return (
    <>
      <Student data={data} />
      <Teacher />
    </>
  );
};

export default App;

c) Student.js
const App = () => {
  return (
    <>
      <Student data={data} />
      <Teacher />
    </>
  );
};

export default App;

Note- isme to hum simply kya kar rhe the ki hume data send karna tha parents se child me to hum direct aise send kar sakte hai. lekin man lo ki mujhe siblings me data send karna hai to uske liye kya approach hai
so uske liye hum use karte hai stateup. means pahle hum us data ko pahle app.js tak pahuchanyenge aur usme bad me hum us data ko dusre child me bhejnge. so man lo hume Student.jsx se data ko send karna hai Teacher.js me to hume
App.js me ek state banana hoga aur us state ki madad se hum us data ko child wale me send karenge

a) App.js
import Student from "./Components/Student.js";
import Teacher from "./Components/Teacher.js";
import { useState } from "react";
const App = () => {
  const [studentData, setStudentData] = useState({});

  return (
    <>
      <div>
        <Student setdata={setStudentData} />
        <Teacher data={studentData} />
      </div>
    </>
  );
};
export default App;


b) Studet.js
import React, { useEffect } from "react";

const Student = ({ setdata }) => {
  
  const data = {
    name: "satyendra",
    class: "8th",
    age: "26",
  };

  useEffect(() => {
    setdata(data);
  }, []);

  return (
    <>
      <div>
        <h1>My information</h1>
      </div>
    </>
  );
};
export default Student;

c) Teacher.js
const Teacher = ({ data }) => {
  return (
    <>
      <h1>kya kar rha hai be</h1>
      <p>{JSON.stringify(data)}</p>
      <p>{data.name}</p>
      <p>{data.class}</p>
      <p>{data.age}</p>
    </>
  );
};
export default Teacher;


Note- so basically hum ek state banate hai aur jo humara function hota hai use hum send karte hai jaha se hume data send karna rhta hai jaise ki abhi hume student me se data send karna hai
to usme jakar useEffect lagakar us function me data ko pass kara denge so isse ye hoga ki humara variable bhi update ho jayega App.js me is function ki wajah se aur hum is variable ko Teacher.js me send kar denge

Ex-3 sending the data from the parents to grand child. like sending the data from principal to teacher and from teacher to student
a) App.js
import Principal from "./Components/Principal.js";
const App = () => {
  return (
    <>
      <h1>sharing data from grand parent to child</h1>
      <Principal />
    </>
  );
};
export default App;

b)Principal.js
import Teacher from "./Teachers.js";
const Principal = () => {
  const newdata = {
    name: "Satyendra",
    age: "26",
    grade: "A",
  };
  return (
    <>
      <Teacher data={newdata} />
    </>
  );
};
export default Principal;

c) Teacher.js
// New file: /Components/Teachers.js
import Student from "./Student.js";
const Teachers = ({ data }) => {
  return (
    <>
      <p>Principal send this data to teacher</p>
      <p>{JSON.stringify(data)}</p>
      <Student data={data} />
    </>
  );
};
export default Teachers;

d)Student.js
// New file: /Components/Student.js
const Student = ({ data }) => {
  return (
    <>
      <p>Teacher send this data to the student</p>
      <p>{JSON.stringify(data)}</p>
    </>
  );
};
export default Student;

Note- and it is working. but this is not the best approach to do so. so i will simply use the useContext api for sharing the complex data
in this i have made the increment button and decrement button for updating the count.
a) Button.js

import { useState } from "react";
const Button = ({ newdata }) => {
  const [data, setData] = useState(0);

  const handleincrement = () => {
    const updated = data + 1;
    setData(updated);
    newdata(updated); // sync to App
  };

  const handledecrement = () => {
    const updated = data - 1;
    setData(updated);
    newdata(updated); // sync to App
  };

  return (
    <>
      <button onClick={handleincrement}>+</button>
      <input type="text" value={data} readOnly />
      <button onClick={handledecrement}>-</button>
    </>
  );
};

export default Button;

b) Navbar.js
const Navbar = ({ updateddata }) => {
  return (
    <>
      <p>Count is {updateddata}</p>
      <h1>This is my Navbar</h1>
    </>
  );
};
export default Navbar;

c) App.js
import { useState } from "react";
import Navbar from "./Components/Navbar.js";
import Button from "./Components/Button.js";

const App = () => {
  const [data, setData] = useState(0);

  return (
    <>
      <Navbar updateddata={data} />
      <h1>Hello</h1>
      <Button newdata={setData} />
    </>
  );
};

export default App;
